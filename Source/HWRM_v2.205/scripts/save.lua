-- =============================================================================
--     Name    : save.lua
--     Purpose : Contains support for saving the lua state
--
--     Created 7/27/01 by fpoiker
--     Copyright Relic Entertainment, Inc.  All rights reserved.
-- =============================================================================

--=============================================================================
--    Saving:
--=============================================================================*/
----------------------------------------------------------------------------
--  Name:        saveVar
--  Description: Saves a single variable in lua.  Does not save userdata or functions
--  Inputs:      varname - the name of the variable to save, value - the value of the variable to save
--  Output:      Writes to the stdout file
--  Returns:     nothing
----------------------------------------------------------------------------
function saveVar(varname, value)
    -- don't save nil values...  these will be collected anyway
    if value == nil then return end

    -- I'm hopeing that all of these will be regenerated during loading
    if type(value)=="userdata" then return end
    if type(value)=="function" then return end

    -- skip tables generated by the game
    if (type(value) == "table" and rawget(value,"_generated_") == 1) then return end

    -- special treatment for game engine class instances
    if (type(value) == "table" and rawget(value,"_ptr_") ~= nil) then
        local ptrval = rawget(value,"_ptr_")
        local tagNum = tag(ptrval)
        if ClassTable[tagNum] ~= nil then
            write(varname.."=restore"..rawget(ClassTable[tagNum],"_name_").."("..savePointerToID(ptrval)..")\n")
        end
        return
    end

    write(varname,"=")

    -- if the value is a string, print out 'var = "value"'
    if type(value) == "string" then write(format("%q",value))

    -- if it's a table, much more complicated stuff occurs
    elseif type(value) == "table" then
        if rawget(value,"__visited__") ~= nil then
            write(rawget(value,"__visited__"))
        else
            write("{}\n")
            rawset(value,"__visited__",varname)
            for r,f in value do
                if r ~= "__visited__" then
                    if type(r) == 'string' then
                        saveVar(varname.."."..r,f)
                    else
                        saveVar(varname.."["..r.."]",f)
                    end
                end
            end
        end
    else
        write(tostring(value))
    end

    write("\n")
    flush()
end
----------------------------------------------------------------------------
--  Name:        clearVisited
--  Description: Clears the visited flag from
--  Inputs:      varname - the name of the variable to save, value - the value of the variable to save
--  Output:      Writes to the stdout file
--  Returns:     nothing
----------------------------------------------------------------------------
function clearVisited(varname, value)
    if type(value) == "table" then
        if rawget(value,"__visited__") ~= nil then
            rawset(value,"__visited__", nil)
        end
        foreach(value, clearVisited)
    end
end

----------------------------------------------------------------------------
--  Name:        saveGlobals
--  Description: Saves all the global variables into stdout
--  Inputs:
--  Output:      Writes all the global variables into the stdout file
--  Returns:     not really sure yet
----------------------------------------------------------------------------
function saveGlobals()
    -- note: this is not reentrant.  The "__visited__" index remains in the tables
    -- and affects the next call of saveVar
    write("\n-- global environment\n")
    foreach(globals(),saveVar)
    foreach(globals(),clearVisited)
end

writeto(saveOutputFile)
saveOutputFile = nil        -- we don't want to save this variable

saveGlobals()

saveGlobals = nil
saveVar = nil
